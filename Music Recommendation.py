# -*- coding: utf-8 -*-
"""Copy of Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sESX3KQiKQafr6QI3y8XlOxO2WyTfQVm
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from typing import List, Dict
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

songs=pd.read_csv("songdata.csv")
songs.head()

songs.info()

songs.describe()

songs.dropna(inplace=True)
songs.drop_duplicates(inplace=True)
songs['text'] = songs['text'].str.lower()

songs=songs.sample(n=3000)
songs = songs.drop('link', axis=1)
songs=songs.reset_index(drop=True)

col = songs['text']
col=col.str.replace(r'\n', '')
songs['text'] = col

tfidf = TfidfVectorizer(analyzer='word', stop_words='english')
matrix = tfidf.fit_transform(songs['text'])
print(matrix)

matrix_array = matrix.toarray()

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(matrix_array, cmap='viridis')
plt.title('Heatmap of TF-IDF Weighted Matrix')
plt.xlabel('Terms')
plt.ylabel('Documents')
plt.show()

cosineSim = cosine_similarity(matrix)
similar = {}

for i in range(len(cosineSim)):
    similarIndex = cosineSim[i].argsort()[:-50:-1]
    similarItems = []
    for x in similarIndex:
        if x != i:
            similarItems.append((cosineSim[i][x], songs['song'][x], songs['artist'][x]))

    similar[songs['song'].iloc[i]] = similarItems

print(cosineSim)

plt.figure(figsize=(10, 8))
sns.heatmap(cosineSim, cmap='viridis')
plt.title('Heatmap of Cosine Similarity Matrix')
plt.xlabel('Documents')
plt.ylabel('Documents')
plt.show()

def recommendedSongs(song, recom_song):
    rec_items = len(recom_song)

    print(f'The {rec_items} recommended songs for {song} are:')
    for i in range(rec_items):
        print(f"Number {i+1}:")
        print(f"{recom_song[i][1]} by {recom_song[i][2]} with {round(recom_song[i][0], 3)} similarity score")
        print("--------------------")

def recommend(matrix_similar, recommendation):
    song = recommendation['song']
    number_songs = recommendation['number_songs']
    recom_song = matrix_similar[song][:number_songs]
    recommendedSongs(song=song, recom_song=recom_song)

recommendation = {
    "song": songs['song'].iloc[10],
    "number_songs": 4
}
recommend(similar,recommendation)